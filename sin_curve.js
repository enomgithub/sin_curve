/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];

function degToRad_31072(d_31076) {
	var result_31077 = 0.0;

		result_31077 = (d_31076 * 1.7453292519943295e-002);

	return result_31077;

}

function init_31054(n_31056) {
		L1: do {
			var i_31070 = 0;
			var i_31086 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_31086 < n_31056)) break L3;
						i_31070 = i_31086;
						var width_31079 = Math.floor(((1.0000000000000000e+002 * Math.sin(degToRad_31072(i_31070))) + 1.0000000000000000e+002));
						var bar_31080 = document.createElement("div");
						bar_31080.classList.add("bar");
						bar_31080.style.height = "1px";
						bar_31080.style.width = toJSStr((cstrToNimstr((width_31079)+"").slice(0,-1)).concat(makeNimstrLit("px")));
						bar_31080.style.backgroundColor = "#302833";
						document.getElementById("sin-curve").appendChild(bar_31080);
						i_31086 += 1;
					}
			} while(false);
		} while(false);

	
}

function run_31001() {
		var bars_31004 = document.getElementsByClassName("bar");
		var first_31012 = 0;
		var last_31021 = (bars_31004 != null ? (bars_31004.length-1) : -1);
		var firstWidth_31022 = bars_31004[first_31012].style.width;
		L1: do {
			var i_31044 = 0;
			var i_31052 = first_31012;
			L2: do {
					L3: while (true) {
					if (!(i_31052 < last_31021)) break L3;
						i_31044 = i_31052;
						bars_31004[i_31044].style.width = bars_31004[(i_31044 + 1)].style.width;
						i_31052 += 1;
					}
			} while(false);
		} while(false);
		bars_31004[last_31021].style.width = firstWidth_31022;

	
}

function stop_31088(timer_31091) {
		if (!((timer_31091 == null))) {
		window.clearInterval(timer_31091);
		}
		

	
}

function toggleKey_31103(keyCode_31105, timer_31107) {
		switch (keyCode_31105) {
		case 83:
			stop_31088(timer_31107);
			break;
		default: 
			break;
		}

	
}

function main_31109() {

		function colonanonymous__31115() {
				run_31001();

			
		}

		function colonanonymous__31118(e_31120) {
				toggleKey_31103(e_31120.keyCode, timer_31117);

			
		}

		init_31054(360);
		var timer_31117 = window.setInterval(colonanonymous__31115, 16);
		window.addEventListener("keydown", colonanonymous__31118, false);

	
}
main_31109();
